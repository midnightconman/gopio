// Code generated by protoc-gen-go.
// source: gopio.proto
// DO NOT EDIT!

/*
Package gopio is a generated protocol buffer package.

It is generated from these files:
	gopio.proto

It has these top-level messages:
	Health
	Pin
	PinDirection
	PinState
	PinPull
*/
package gopio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Health struct {
	Alive bool `protobuf:"varint,1,opt,name=alive" json:"alive,omitempty"`
}

func (m *Health) Reset()                    { *m = Health{} }
func (m *Health) String() string            { return proto.CompactTextString(m) }
func (*Health) ProtoMessage()               {}
func (*Health) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Health) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

type Pin struct {
	Number    int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Direction int32 `protobuf:"varint,2,opt,name=direction" json:"direction,omitempty"`
	State     int32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	Pull      int32 `protobuf:"varint,4,opt,name=pull" json:"pull,omitempty"`
}

func (m *Pin) Reset()                    { *m = Pin{} }
func (m *Pin) String() string            { return proto.CompactTextString(m) }
func (*Pin) ProtoMessage()               {}
func (*Pin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pin) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Pin) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *Pin) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Pin) GetPull() int32 {
	if m != nil {
		return m.Pull
	}
	return 0
}

type PinDirection struct {
	Direction int32 `protobuf:"varint,1,opt,name=direction" json:"direction,omitempty"`
}

func (m *PinDirection) Reset()                    { *m = PinDirection{} }
func (m *PinDirection) String() string            { return proto.CompactTextString(m) }
func (*PinDirection) ProtoMessage()               {}
func (*PinDirection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PinDirection) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

type PinState struct {
	State int32 `protobuf:"varint,1,opt,name=state" json:"state,omitempty"`
}

func (m *PinState) Reset()                    { *m = PinState{} }
func (m *PinState) String() string            { return proto.CompactTextString(m) }
func (*PinState) ProtoMessage()               {}
func (*PinState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PinState) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type PinPull struct {
	Pull int32 `protobuf:"varint,1,opt,name=pull" json:"pull,omitempty"`
}

func (m *PinPull) Reset()                    { *m = PinPull{} }
func (m *PinPull) String() string            { return proto.CompactTextString(m) }
func (*PinPull) ProtoMessage()               {}
func (*PinPull) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PinPull) GetPull() int32 {
	if m != nil {
		return m.Pull
	}
	return 0
}

func init() {
	proto.RegisterType((*Health)(nil), "gopio.Health")
	proto.RegisterType((*Pin)(nil), "gopio.Pin")
	proto.RegisterType((*PinDirection)(nil), "gopio.PinDirection")
	proto.RegisterType((*PinState)(nil), "gopio.PinState")
	proto.RegisterType((*PinPull)(nil), "gopio.PinPull")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoPIO service

type GoPIOClient interface {
	// Is the service up?
	HealthCheck(ctx context.Context, in *Health, opts ...grpc.CallOption) (*Health, error)
	// Is the Pin input or output?
	GetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error)
	// Is the Pin High or Low
	GetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error)
	// Is the Pin Off, Down or Up
	GetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error)
	// Set the Pin input or output?
	SetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error)
	// Set the Pin High or Low
	SetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error)
	// Set the Pin Off, Down or Up
	SetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error)
	// Toggle the Pin between High and Low
	TogglePinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error)
}

type goPIOClient struct {
	cc *grpc.ClientConn
}

func NewGoPIOClient(cc *grpc.ClientConn) GoPIOClient {
	return &goPIOClient{cc}
}

func (c *goPIOClient) HealthCheck(ctx context.Context, in *Health, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) GetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error) {
	out := new(PinDirection)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/GetPinDirection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) GetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error) {
	out := new(PinState)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/GetPinState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) GetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error) {
	out := new(PinPull)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/GetPinPull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) SetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error) {
	out := new(PinDirection)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/SetPinDirection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) SetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error) {
	out := new(PinState)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/SetPinState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) SetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error) {
	out := new(PinPull)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/SetPinPull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) TogglePinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error) {
	out := new(PinState)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/TogglePinState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoPIO service

type GoPIOServer interface {
	// Is the service up?
	HealthCheck(context.Context, *Health) (*Health, error)
	// Is the Pin input or output?
	GetPinDirection(context.Context, *Pin) (*PinDirection, error)
	// Is the Pin High or Low
	GetPinState(context.Context, *Pin) (*PinState, error)
	// Is the Pin Off, Down or Up
	GetPinPull(context.Context, *Pin) (*PinPull, error)
	// Set the Pin input or output?
	SetPinDirection(context.Context, *Pin) (*PinDirection, error)
	// Set the Pin High or Low
	SetPinState(context.Context, *Pin) (*PinState, error)
	// Set the Pin Off, Down or Up
	SetPinPull(context.Context, *Pin) (*PinPull, error)
	// Toggle the Pin between High and Low
	TogglePinState(context.Context, *Pin) (*PinState, error)
}

func RegisterGoPIOServer(s *grpc.Server, srv GoPIOServer) {
	s.RegisterService(&_GoPIO_serviceDesc, srv)
}

func _GoPIO_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Health)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).HealthCheck(ctx, req.(*Health))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_GetPinDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).GetPinDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/GetPinDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).GetPinDirection(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_GetPinState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).GetPinState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/GetPinState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).GetPinState(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_GetPinPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).GetPinPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/GetPinPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).GetPinPull(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_SetPinDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).SetPinDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/SetPinDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).SetPinDirection(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_SetPinState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).SetPinState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/SetPinState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).SetPinState(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_SetPinPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).SetPinPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/SetPinPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).SetPinPull(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_TogglePinState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).TogglePinState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/TogglePinState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).TogglePinState(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoPIO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gopio.GoPIO",
	HandlerType: (*GoPIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GoPIO_HealthCheck_Handler,
		},
		{
			MethodName: "GetPinDirection",
			Handler:    _GoPIO_GetPinDirection_Handler,
		},
		{
			MethodName: "GetPinState",
			Handler:    _GoPIO_GetPinState_Handler,
		},
		{
			MethodName: "GetPinPull",
			Handler:    _GoPIO_GetPinPull_Handler,
		},
		{
			MethodName: "SetPinDirection",
			Handler:    _GoPIO_SetPinDirection_Handler,
		},
		{
			MethodName: "SetPinState",
			Handler:    _GoPIO_SetPinState_Handler,
		},
		{
			MethodName: "SetPinPull",
			Handler:    _GoPIO_SetPinPull_Handler,
		},
		{
			MethodName: "TogglePinState",
			Handler:    _GoPIO_TogglePinState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gopio.proto",
}

func init() { proto.RegisterFile("gopio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xdd, 0x4a, 0xc3, 0x30,
	0x18, 0x6d, 0xec, 0x5a, 0xe7, 0x57, 0xdd, 0x20, 0x8a, 0x94, 0xa1, 0x32, 0xe2, 0x8d, 0xc8, 0xac,
	0xa0, 0x3e, 0xc1, 0x14, 0xa6, 0x57, 0x86, 0xd5, 0x17, 0xe8, 0xba, 0xd0, 0x06, 0xd3, 0xa4, 0xd4,
	0xd4, 0x57, 0xf0, 0xb5, 0x65, 0xc9, 0xe8, 0x8f, 0x57, 0x73, 0x77, 0xdf, 0xf9, 0xce, 0xf9, 0xce,
	0x39, 0xfd, 0x81, 0x20, 0x53, 0x25, 0x57, 0x51, 0x59, 0x29, 0xad, 0xb0, 0x67, 0x00, 0xb9, 0x02,
	0xff, 0x95, 0x25, 0x42, 0xe7, 0xf8, 0x0c, 0xbc, 0x44, 0xf0, 0x6f, 0x16, 0xa2, 0x29, 0xba, 0x19,
	0x2e, 0x2d, 0x20, 0x0c, 0x5c, 0xca, 0x25, 0x3e, 0x07, 0x5f, 0xd6, 0xc5, 0x8a, 0x55, 0x86, 0xf5,
	0x96, 0x5b, 0x84, 0x2f, 0xe0, 0x68, 0xcd, 0x2b, 0x96, 0x6a, 0xae, 0x64, 0x78, 0x60, 0xa8, 0x76,
	0xb1, 0xb1, 0xfc, 0xd2, 0x89, 0x66, 0xa1, 0x6b, 0x18, 0x0b, 0x30, 0x86, 0x41, 0x59, 0x0b, 0x11,
	0x0e, 0xcc, 0xd2, 0xcc, 0x64, 0x06, 0xc7, 0x94, 0xcb, 0x97, 0xe6, 0xb2, 0xe7, 0x8b, 0xfe, 0xf8,
	0x92, 0x29, 0x0c, 0x29, 0x97, 0xb1, 0x71, 0x6b, 0x32, 0x50, 0x27, 0x83, 0x5c, 0xc2, 0x21, 0xe5,
	0x92, 0xd6, 0x42, 0x34, 0x71, 0xa8, 0x8d, 0x7b, 0xf8, 0x71, 0xc1, 0x5b, 0x28, 0xfa, 0xf6, 0x8e,
	0xef, 0x20, 0xb0, 0xcf, 0xff, 0x9c, 0xb3, 0xf4, 0x13, 0x9f, 0x44, 0xf6, 0x1d, 0xd9, 0xdd, 0xa4,
	0x0f, 0x89, 0x83, 0x9f, 0x60, 0xbc, 0x60, 0xba, 0x57, 0x15, 0xb6, 0x1a, 0xca, 0xe5, 0xe4, 0xb4,
	0x9d, 0x1b, 0x01, 0x71, 0xf0, 0x0c, 0x02, 0x7b, 0x65, 0x2b, 0x77, 0x2f, 0xc6, 0xed, 0x6c, 0x48,
	0xe2, 0xe0, 0x5b, 0x00, 0xab, 0x36, 0xf5, 0xbb, 0xe2, 0x51, 0x3b, 0x6f, 0x38, 0xdb, 0x27, 0xde,
	0xab, 0x4f, 0xfc, 0xaf, 0x3e, 0xf1, 0xae, 0x7d, 0xee, 0x61, 0xf4, 0xa1, 0xb2, 0x4c, 0xb0, 0x1d,
	0xcd, 0xe7, 0xd7, 0x10, 0xa6, 0xaa, 0x88, 0x0a, 0xbe, 0x96, 0x3c, 0xcb, 0x75, 0xaa, 0x64, 0x91,
	0x48, 0x2b, 0x9b, 0xdb, 0x4f, 0x44, 0xd1, 0xca, 0x37, 0xbf, 0xec, 0xe3, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0xe6, 0x4f, 0x4a, 0xc1, 0x02, 0x00, 0x00,
}
