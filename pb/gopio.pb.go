// Code generated by protoc-gen-go.
// source: gopio.proto
// DO NOT EDIT!

/*
Package gopio is a generated protocol buffer package.

It is generated from these files:
	gopio.proto

It has these top-level messages:
	Pin
	PinDirection
	PinState
	PinPull
*/
package gopio

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PinDirection_Direction int32

const (
	PinDirection_Input  PinDirection_Direction = 0
	PinDirection_Output PinDirection_Direction = 1
)

var PinDirection_Direction_name = map[int32]string{
	0: "Input",
	1: "Output",
}
var PinDirection_Direction_value = map[string]int32{
	"Input":  0,
	"Output": 1,
}

func (x PinDirection_Direction) String() string {
	return proto.EnumName(PinDirection_Direction_name, int32(x))
}
func (PinDirection_Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type PinState_State int32

const (
	PinState_Low  PinState_State = 0
	PinState_High PinState_State = 1
)

var PinState_State_name = map[int32]string{
	0: "Low",
	1: "High",
}
var PinState_State_value = map[string]int32{
	"Low":  0,
	"High": 1,
}

func (x PinState_State) String() string {
	return proto.EnumName(PinState_State_name, int32(x))
}
func (PinState_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type PinPull_Pull int32

const (
	PinPull_PullOff  PinPull_Pull = 0
	PinPull_PullDown PinPull_Pull = 1
	PinPull_PullUp   PinPull_Pull = 2
)

var PinPull_Pull_name = map[int32]string{
	0: "PullOff",
	1: "PullDown",
	2: "PullUp",
}
var PinPull_Pull_value = map[string]int32{
	"PullOff":  0,
	"PullDown": 1,
	"PullUp":   2,
}

func (x PinPull_Pull) String() string {
	return proto.EnumName(PinPull_Pull_name, int32(x))
}
func (PinPull_Pull) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Pin struct {
	Number int32 `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
}

func (m *Pin) Reset()                    { *m = Pin{} }
func (m *Pin) String() string            { return proto.CompactTextString(m) }
func (*Pin) ProtoMessage()               {}
func (*Pin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pin) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type PinDirection struct {
}

func (m *PinDirection) Reset()                    { *m = PinDirection{} }
func (m *PinDirection) String() string            { return proto.CompactTextString(m) }
func (*PinDirection) ProtoMessage()               {}
func (*PinDirection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PinState struct {
}

func (m *PinState) Reset()                    { *m = PinState{} }
func (m *PinState) String() string            { return proto.CompactTextString(m) }
func (*PinState) ProtoMessage()               {}
func (*PinState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type PinPull struct {
}

func (m *PinPull) Reset()                    { *m = PinPull{} }
func (m *PinPull) String() string            { return proto.CompactTextString(m) }
func (*PinPull) ProtoMessage()               {}
func (*PinPull) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Pin)(nil), "gopio.Pin")
	proto.RegisterType((*PinDirection)(nil), "gopio.PinDirection")
	proto.RegisterType((*PinState)(nil), "gopio.PinState")
	proto.RegisterType((*PinPull)(nil), "gopio.PinPull")
	proto.RegisterEnum("gopio.PinDirection_Direction", PinDirection_Direction_name, PinDirection_Direction_value)
	proto.RegisterEnum("gopio.PinState_State", PinState_State_name, PinState_State_value)
	proto.RegisterEnum("gopio.PinPull_Pull", PinPull_Pull_name, PinPull_Pull_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoPIO service

type GoPIOClient interface {
	// Is the Pin input or output?
	GetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error)
	// Is the Pin High or Low
	GetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error)
	// Is the Pin Off, Down or Up
	GetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error)
	// Set the Pin input or output?
	SetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error)
	// Is the Pin High or Low
	SetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error)
	// Is the Pin Off, Down or Up
	SetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error)
}

type goPIOClient struct {
	cc *grpc.ClientConn
}

func NewGoPIOClient(cc *grpc.ClientConn) GoPIOClient {
	return &goPIOClient{cc}
}

func (c *goPIOClient) GetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error) {
	out := new(PinDirection)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/GetPinDirection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) GetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error) {
	out := new(PinState)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/GetPinState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) GetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error) {
	out := new(PinPull)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/GetPinPull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) SetPinDirection(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinDirection, error) {
	out := new(PinDirection)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/SetPinDirection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) SetPinState(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinState, error) {
	out := new(PinState)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/SetPinState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goPIOClient) SetPinPull(ctx context.Context, in *Pin, opts ...grpc.CallOption) (*PinPull, error) {
	out := new(PinPull)
	err := grpc.Invoke(ctx, "/gopio.GoPIO/SetPinPull", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoPIO service

type GoPIOServer interface {
	// Is the Pin input or output?
	GetPinDirection(context.Context, *Pin) (*PinDirection, error)
	// Is the Pin High or Low
	GetPinState(context.Context, *Pin) (*PinState, error)
	// Is the Pin Off, Down or Up
	GetPinPull(context.Context, *Pin) (*PinPull, error)
	// Set the Pin input or output?
	SetPinDirection(context.Context, *Pin) (*PinDirection, error)
	// Is the Pin High or Low
	SetPinState(context.Context, *Pin) (*PinState, error)
	// Is the Pin Off, Down or Up
	SetPinPull(context.Context, *Pin) (*PinPull, error)
}

func RegisterGoPIOServer(s *grpc.Server, srv GoPIOServer) {
	s.RegisterService(&_GoPIO_serviceDesc, srv)
}

func _GoPIO_GetPinDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).GetPinDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/GetPinDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).GetPinDirection(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_GetPinState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).GetPinState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/GetPinState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).GetPinState(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_GetPinPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).GetPinPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/GetPinPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).GetPinPull(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_SetPinDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).SetPinDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/SetPinDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).SetPinDirection(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_SetPinState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).SetPinState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/SetPinState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).SetPinState(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoPIO_SetPinPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoPIOServer).SetPinPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopio.GoPIO/SetPinPull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoPIOServer).SetPinPull(ctx, req.(*Pin))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoPIO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gopio.GoPIO",
	HandlerType: (*GoPIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPinDirection",
			Handler:    _GoPIO_GetPinDirection_Handler,
		},
		{
			MethodName: "GetPinState",
			Handler:    _GoPIO_GetPinState_Handler,
		},
		{
			MethodName: "GetPinPull",
			Handler:    _GoPIO_GetPinPull_Handler,
		},
		{
			MethodName: "SetPinDirection",
			Handler:    _GoPIO_SetPinDirection_Handler,
		},
		{
			MethodName: "SetPinState",
			Handler:    _GoPIO_SetPinState_Handler,
		},
		{
			MethodName: "SetPinPull",
			Handler:    _GoPIO_SetPinPull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gopio.proto",
}

func init() { proto.RegisterFile("gopio.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0x93, 0x6d, 0xdd, 0x9f, 0xbb, 0xe1, 0xc2, 0x15, 0x64, 0x0c, 0x04, 0x89, 0x20, 0x22,
	0xda, 0x87, 0xe9, 0x83, 0xcf, 0x63, 0x30, 0x07, 0x42, 0x83, 0xc5, 0x0f, 0xb0, 0xd5, 0xae, 0x0b,
	0xac, 0x37, 0xa5, 0xa4, 0xec, 0x23, 0xf9, 0x35, 0x25, 0x8d, 0xd8, 0x3e, 0xaa, 0x4f, 0xf7, 0x1c,
	0x38, 0x97, 0xfc, 0x4e, 0xb8, 0x30, 0xce, 0x4c, 0xa1, 0x4d, 0x58, 0x94, 0xc6, 0x1a, 0x0c, 0x6a,
	0x23, 0x2f, 0xa1, 0xab, 0x34, 0xe1, 0x05, 0xf4, 0xa9, 0xca, 0x77, 0x69, 0x39, 0xe3, 0x57, 0xfc,
	0x36, 0x78, 0xfb, 0x76, 0x72, 0x01, 0x13, 0xa5, 0x69, 0xa5, 0xcb, 0x34, 0xb1, 0xda, 0x90, 0x94,
	0x30, 0xfa, 0x31, 0x38, 0x82, 0x60, 0x43, 0x45, 0x65, 0x05, 0x43, 0x80, 0x7e, 0x54, 0x59, 0xa7,
	0xb9, 0xbc, 0x81, 0xa1, 0xd2, 0x14, 0xdb, 0xad, 0x4d, 0xe5, 0x1c, 0x82, 0x5a, 0xe0, 0x00, 0xba,
	0xaf, 0xe6, 0x24, 0x18, 0x0e, 0xa1, 0xf7, 0xa2, 0xb3, 0x83, 0xe0, 0xf2, 0x19, 0x06, 0x4a, 0x93,
	0xaa, 0x8e, 0x47, 0xf9, 0x00, 0x3d, 0x37, 0x71, 0x0c, 0x03, 0x37, 0xa3, 0xfd, 0x5e, 0x30, 0x9c,
	0xc0, 0xd0, 0x99, 0x95, 0x39, 0x91, 0xe0, 0xee, 0x05, 0xe7, 0xde, 0x0b, 0xd1, 0x59, 0x7c, 0x76,
	0x20, 0x58, 0x1b, 0xb5, 0x89, 0xf0, 0x09, 0xa6, 0xeb, 0xd4, 0xb6, 0x11, 0x11, 0x42, 0x5f, 0x53,
	0x69, 0x9a, 0x9f, 0x37, 0xba, 0xe9, 0xc0, 0xf0, 0x1e, 0xc6, 0x7e, 0xcb, 0xb3, 0xb5, 0x37, 0xa6,
	0x8d, 0xf6, 0x0d, 0x18, 0xde, 0x01, 0xf8, 0x74, 0x8d, 0xd8, 0x0e, 0x9f, 0x35, 0xba, 0xae, 0xc1,
	0x1c, 0x4f, 0xfc, 0x2f, 0x9e, 0xf8, 0x4f, 0x3c, 0xf1, 0x2f, 0x79, 0x96, 0xd7, 0x30, 0x4b, 0x4c,
	0x1e, 0xe6, 0xfa, 0x83, 0x74, 0x76, 0xb0, 0x89, 0xa1, 0x7c, 0x4b, 0x3e, 0xb5, 0xf4, 0x5f, 0xa8,
	0xf8, 0xae, 0x5f, 0x5f, 0xc4, 0xe3, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x48, 0xfd, 0x9f,
	0x20, 0x02, 0x00, 0x00,
}
